# -*- coding: utf-8 -*-
"""Gradient Boosting Machines (GBM)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17eK0Mp7R0GVoP4LcZJWhzZe0gu8ODoNu
"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('diabetes.csv')

# clean data by replacing invalid data with the median
columns_with_invalid_zeros = ['Glucose','Insulin', 'BMI']
data[columns_with_invalid_zeros] = data[columns_with_invalid_zeros].replace(0, np.nan)

data.fillna(data.median(), inplace=True)

X = data[['Glucose', 'Insulin', 'BMI']]
y = data['Outcome']



# Splitting the dataset into the Training set and Test set using sklearn with a 20-80 split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)



scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

#function defined to speed up ploting
def plot_confusion_matrix(cm, title):
    plt.figure(figsize=(5, 4))
    sns.heatmap(cm, annot=True, fmt="d", cmap='Blues')
    plt.title(title)
    plt.ylabel('Actual label')
    plt.xlabel('Predicted label')
    plt.show()

# Initialize list to store accuracies
gbm_accuracies = []

for lr in np.arange(0.1,0.2,0.01):
    gbm_model = GradientBoostingClassifier(learning_rate=lr)
    gbm_model.fit(X_train, y_train)
    y_pred = gbm_model.predict(X_test)

    # Calculate accuracy
    accuracy = accuracy_score(y_test, y_pred)
    gbm_accuracies.append((lr, accuracy))

    # Plot confusion matrix
    plot_confusion_matrix(confusion_matrix(y_test, y_pred), f'GBM with learning_rate={lr}')

# Find the learning rate with the highest accuracy
optimal_lr, optimal_accuracy = max(gbm_accuracies, key=lambda x: x[1])
print(f"Optimal GBM learning rate: {optimal_lr} with accuracy: {optimal_accuracy:.2f}")